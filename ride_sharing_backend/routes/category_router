const express = require('express');
const router = express.Router();
const Category = require('../models/category_schema');

// POST - Create a new category
router.post('/', async (req, res) => {
  const { name } = req.body;

  try {
    // Check if a category with the same name already exists
    const existingCategory = await Category.findOne({ name });
    if (existingCategory) {
      return res.status(400).json({ error: 'Category with this name already exists' });
    }

    // Create a new category instance
    const newCategory = new Category({ name});

    // Save the new category to the database
    const savedCategory = await newCategory.save();
    res.status(201).json({ message: 'Category created successfully', category: savedCategory });
  } catch (error) {
    console.error('Error creating category:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// GET - Get all categories
router.get('/', async (req, res) => {
  try {
    const categories = await Category.find({});
    res.status(200).json({ data:categories });
  } catch (error) {
    console.error('Error fetching categories:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// GET - Get category by name
router.get('/:name', async (req, res) => {
  const categoryName = req.params.name;

  try {
    const category = await Category.findOne({ name: categoryName });
    if (!category) {
      return res.status(404).json({ error: 'Category not found' });
    }
    res.status(200).json({ category });
  } catch (error) {
    console.error('Error fetching category:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// PUT - Update category by name
router.put('/:name', async (req, res) => {
  const categoryName = req.params.name;
//   const { bookingRequestId, rideId } = req.body;

  try {
    const updatedCategory = await Category.findOneAndUpdate(
      { name: categoryName },
    //   { bookingRequestId, rideId },
    //   { new: true }
    );

    if (!updatedCategory) {
      return res.status(404).json({ error: 'Category not found' });
    }

    res.status(200).json({ message: 'Category updated successfully', category: updatedCategory });
  } catch (error) {
    console.error('Error updating category:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// DELETE - Delete category by name
router.delete('/:name', async (req, res) => {
  const categoryName = req.params.name;

  try {
    const deletedCategory = await Category.findOneAndDelete({ name: categoryName });

    if (!deletedCategory) {
      return res.status(404).json({ error: 'Category not found' });
    }

    res.status(200).json({ message: 'Category deleted successfully', category: deletedCategory });
  } catch (error) {
    console.error('Error deleting category:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
