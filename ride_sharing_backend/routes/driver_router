const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const Driver = require('../models/driver_schema');

// Signup endpoint for driver
router.post('/signup', (req, res) => {
  const { username, phoneNumber, email, password, city ,rideCategory, rideName, ridePlate } = req.body;

  // Validate input fields
  if (!username || !phoneNumber || !email || !password || !city  || !rideCategory || !rideName ||!ridePlate) {
    return res.status(400).json({ error: 'Missing required fields in request body' });
  }

  // Check for unique email and phone number
  Driver.findOne({ email })
    .then(existingDriver => {
      if (existingDriver) {
        return res.status(400).json({ error: 'Email already exists' });
      }

      // Create a new driver instance
      const newDriver = new Driver({ username, phoneNumber, email, password, city, rideCategory,rideName,ridePlate });

      // Hash password before saving to database
      bcrypt.hash(newDriver.password, 10)
        .then(hash => {
          newDriver.password = hash;
          // Save the new driver to the database
          newDriver.save()
            .then(savedDriver => {
              res.status(201).json({ message: 'Driver registered successfully', driver: savedDriver });
            })
            .catch(err => {
              console.error('Error saving driver:', err);
              res.status(500).json({ error: 'Internal server error' });
            });
        })
        .catch(err => {
          console.error('Error hashing password:', err);
          res.status(500).json({ error: 'Internal server error' });
        });
    })
    .catch(err => {
      console.error('Error checking existing driver:', err);
      res.status(500).json({ error: 'Internal server error' });
    });
});

// Signin endpoint for driver
router.post('/signin', (req, res) => {
  const { email, password } = req.body;

  // Validate input fields
  if (!email || !password) {
    return res.status(400).json({ error: 'Missing required fields in request body' });
  }

  // Find driver by email
  Driver.findOne({ email })
    .then(driver => {
      if (!driver) {
        return res.status(404).json({ error: 'Driver not found' });
      }

      // Compare passwords
      bcrypt.compare(password, driver.password)
        .then(match => {
          if (!match) {
            return res.status(401).json({ error: 'Invalid password' });
          }
          res.status(200).json({ 
            status: 'SUCCESS',
            message: 'Driver signin successful',
            data:driver
          });
        })
        .catch(err => {
          console.error('Error comparing passwords:', err);
          res.status(500).json({ error: 'Internal server error' });
        });
    })
    .catch(err => {
      console.error('Error finding driver:', err);
      res.status(500).json({ error: 'Internal server error' });
    });
});

// Get all drivers endpoint
router.get('/', (req, res) => {
  Driver.find()
    .then(drivers => {
      res.status(200).json({ drivers });
    })
    .catch(err => {
      console.error('Error fetching drivers:', err);
      res.status(500).json({ error: 'Internal server error' });
    });
});


router.get('/:email', (req, res) => {
  const { email } = req.params;

  // Find driver by email
  Driver.findOne({ email })
    .then(driver => {
      if (!driver) {
        return res.status(404).json({ error: 'Driver not found' });
      }
      res.status(200).json({ driver });
    })
    .catch(err => {
      console.error('Error finding driver:', err);
      res.status(500).json({ error: 'Internal server error' });
    });
});


module.exports = router;
